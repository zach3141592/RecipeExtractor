import React from 'react';

interface RecipeData {
  success: boolean;
  title: string;
  source: string;
  formatted_recipe: string;
  original_url: string;
}

interface RecipeResultProps {
  data: RecipeData;
}

export default function RecipeResult({ data }: RecipeResultProps) {
  const copyRecipe = async () => {
    try {
      await navigator.clipboard.writeText(data.formatted_recipe);
      // You could add a toast notification here
      alert('Recipe copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy recipe:', err);
    }
  };

  const downloadPDF = async () => {
    try {
      const { jsPDF } = await import('jspdf');
      const doc = new jsPDF();
      
      // Set up the document
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(24);
      doc.setTextColor(31, 41, 55); // Dark gray
      
      // Add title
      const title = data.title || 'Recipe';
      const titleLines = doc.splitTextToSize(title, 170);
      doc.text(titleLines, 20, 30);
      
      // Add source badge
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(79, 70, 229); // Indigo
      doc.text(`Source: ${data.source}`, 20, 45);
      
      // Add recipe content
      doc.setFontSize(11);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(55, 65, 81); // Gray
      
      const content = data.formatted_recipe;
      const lines = doc.splitTextToSize(content, 170);
      
      // Handle multiple pages
      let yPosition = 60;
      const pageHeight = 280;
      const lineHeight = 6;
      
      for (let i = 0; i < lines.length; i++) {
        if (yPosition > pageHeight) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(lines[i], 20, yPosition);
        yPosition += lineHeight;
      }
      
      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(156, 163, 175); // Light gray
        doc.text(`Generated by Recipe Extractor - Page ${i} of ${pageCount}`, 20, 290);
      }
      
      // Save the PDF
      const fileName = title.replace(/[^a-z0-9]/gi, '_').toLowerCase();
      doc.save(`${fileName}_recipe.pdf`);
      
    } catch (err) {
      console.error('Failed to generate PDF:', err);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  return (
    <div className="result">
      <div className="result-header">
        <div className="result-title">{data.title}</div>
        <div className="result-source">{data.source}</div>
        <div className="action-buttons">
          <button className="copy-btn" onClick={copyRecipe}>
            <span>Copy Recipe</span>
          </button>
          <button className="download-btn" onClick={downloadPDF}>
            <span>Download PDF</span>
          </button>
        </div>
      </div>
      <div className="recipe-content">
        {data.formatted_recipe}
      </div>
      
      <style jsx>{`
        .result {
          background: rgba(255, 255, 255, 0.9);
          backdrop-filter: blur(20px);
          border-radius: 20px;
          padding: 32px;
          margin-top: 32px;
          border: 1px solid rgba(255, 255, 255, 0.2);
          box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.1),
            0 2px 16px rgba(0, 0, 0, 0.05);
          animation: slideInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @keyframes slideInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        .result-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 28px;
          padding-bottom: 20px;
          border-bottom: 1px solid rgba(0, 0, 0, 0.08);
          gap: 20px;
          flex-wrap: wrap;
        }

        .result-title {
          font-size: 1.5rem;
          font-weight: 600;
          color: #1a202c;
          flex: 1;
          min-width: 200px;
          letter-spacing: -0.025em;
        }

        .result-source {
          background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
          color: white;
          padding: 8px 16px;
          border-radius: 12px;
          font-size: 0.85rem;
          font-weight: 500;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        .action-buttons {
          display: flex;
          gap: 12px;
          align-items: center;
        }

        .copy-btn, .download-btn {
          border: none;
          padding: 12px 20px;
          border-radius: 12px;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          color: white;
        }

        .copy-btn {
          background: #000000;
          color: white;
        }

        .download-btn {
          background: #000000;
          color: white;
        }

        .copy-btn::before, .download-btn::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          opacity: 0;
          transition: opacity 0.3s ease;
        }

        .copy-btn::before {
          background: #333333;
        }

        .download-btn::before {
          background: #333333;
        }

        .copy-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .download-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .copy-btn:hover::before, .download-btn:hover::before {
          opacity: 1;
        }

        .copy-btn span, .download-btn span {
          position: relative;
          z-index: 1;
          color: white;
        }

        .recipe-content {
          white-space: pre-wrap;
          line-height: 1.8;
          color: #374151;
          font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          font-size: 1rem;
          background: rgba(248, 250, 252, 0.8);
          padding: 24px;
          border-radius: 16px;
          border: 1px solid rgba(0, 0, 0, 0.05);
        }

        @media (max-width: 768px) {
          .result {
            padding: 24px;
            margin-top: 24px;
          }

          .result-header {
            flex-direction: column;
            align-items: stretch;
            text-align: center;
            gap: 16px;
          }
          
          .result-title {
            min-width: auto;
            font-size: 1.3rem;
          }

          .action-buttons {
            flex-direction: column;
            gap: 10px;
          }

          .copy-btn, .download-btn {
            padding: 14px 18px;
            font-size: 13px;
          }

          .recipe-content {
            padding: 20px;
            font-size: 0.95rem;
          }
        }
      `}</style>
    </div>
  );
} 